// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace App.ServiceInterface
{
  public class TestMachine
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      Reject,
      Opened,
      Validate,
      CheckLicence,
      CheckDetails,
      PrintLabel,
      ShipItem,
      ReceiptConfirmed,
      Close,
      RejectOutright,
    }

    public enum State
    {
      New,
      Drafted,
      Validated,
      LicenceChecked,
      DetailsChecked,
      LabelPrinted,
      ItemShipped,
      ReportedLost,
      ReceiptConfirmed,
      Closed,
      Rejected,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnNewEntry = null;
    public EntryExitDelegate OnNewExit = null;
    public EntryExitDelegate OnDraftedEntry = null;
    public EntryExitDelegate OnDraftedExit = null;
    public EntryExitDelegate OnValidatedEntry = null;
    public EntryExitDelegate OnValidatedExit = null;
    public EntryExitDelegate OnLicenceCheckedEntry = null;
    public EntryExitDelegate OnLicenceCheckedExit = null;
    public EntryExitDelegate OnDetailsCheckedEntry = null;
    public EntryExitDelegate OnDetailsCheckedExit = null;
    public EntryExitDelegate OnLabelPrintedEntry = null;
    public EntryExitDelegate OnLabelPrintedExit = null;
    public EntryExitDelegate OnItemShippedEntry = null;
    public EntryExitDelegate OnItemShippedExit = null;
    public EntryExitDelegate OnReportedLostEntry = null;
    public EntryExitDelegate OnReportedLostExit = null;
    public EntryExitDelegate OnReceiptConfirmedEntry = null;
    public EntryExitDelegate OnReceiptConfirmedExit = null;
    public EntryExitDelegate OnClosedEntry = null;
    public EntryExitDelegate OnClosedExit = null;
    public EntryExitDelegate OnRejectedEntry = null;
    public EntryExitDelegate OnRejectedExit = null;
    public GuardClauseDelegate GuardClauseFromNewToDraftedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromDraftedToValidatedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromDraftedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromValidatedToLicenceCheckedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromValidatedToDraftedUsingTriggerReject = null;
    public GuardClauseDelegate GuardClauseFromValidatedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromLicenceCheckedToDetailsCheckedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromLicenceCheckedToValidatedUsingTriggerReject = null;
    public GuardClauseDelegate GuardClauseFromLicenceCheckedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromDetailsCheckedToLabelPrintedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromDetailsCheckedToLicenceCheckedUsingTriggerReject = null;
    public GuardClauseDelegate GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromLabelPrintedToItemShippedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromLabelPrintedToDetailsCheckedUsingTriggerReject = null;
    public GuardClauseDelegate GuardClauseFromLabelPrintedToRejectedUsingTriggerRejectOutright = null;
    public GuardClauseDelegate GuardClauseFromItemShippedToReceiptConfirmedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromItemShippedToReportedLostUsingTriggerLost = null;
    public GuardClauseDelegate GuardClauseFromReportedLostToClosedUsingTriggerAccept = null;
    public GuardClauseDelegate GuardClauseFromReceiptConfirmedToClosedUsingTriggerAccept = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public TestMachine()
    {
      stateMachine = new StateMachine<State, Trigger>(State.New);
      stateMachine.Configure(State.New)
        .OnEntry(() => { if (OnNewEntry != null) OnNewEntry(); })
        .OnExit(() => { if (OnNewExit != null) OnNewExit(); })
        .PermitIf(Trigger.Accept, State.Drafted , () => { if (GuardClauseFromNewToDraftedUsingTriggerAccept != null) return GuardClauseFromNewToDraftedUsingTriggerAccept(); return true; } )
      ;
      stateMachine.Configure(State.Drafted)
        .OnEntry(() => { if (OnDraftedEntry != null) OnDraftedEntry(); })
        .OnExit(() => { if (OnDraftedExit != null) OnDraftedExit(); })
        .PermitIf(Trigger.Accept, State.Validated , () => { if (GuardClauseFromDraftedToValidatedUsingTriggerAccept != null) return GuardClauseFromDraftedToValidatedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromDraftedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromDraftedToRejectedUsingTriggerRejectOutright(); return true; } )
      ;
      stateMachine.Configure(State.Validated)
        .OnEntry(() => { if (OnValidatedEntry != null) OnValidatedEntry(); })
        .OnExit(() => { if (OnValidatedExit != null) OnValidatedExit(); })
        .PermitIf(Trigger.Accept, State.LicenceChecked , () => { if (GuardClauseFromValidatedToLicenceCheckedUsingTriggerAccept != null) return GuardClauseFromValidatedToLicenceCheckedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.Reject, State.Drafted , () => { if (GuardClauseFromValidatedToDraftedUsingTriggerReject != null) return GuardClauseFromValidatedToDraftedUsingTriggerReject(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromValidatedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromValidatedToRejectedUsingTriggerRejectOutright(); return true; } )
      ;
      stateMachine.Configure(State.LicenceChecked)
        .OnEntry(() => { if (OnLicenceCheckedEntry != null) OnLicenceCheckedEntry(); })
        .OnExit(() => { if (OnLicenceCheckedExit != null) OnLicenceCheckedExit(); })
        .PermitIf(Trigger.Accept, State.DetailsChecked , () => { if (GuardClauseFromLicenceCheckedToDetailsCheckedUsingTriggerAccept != null) return GuardClauseFromLicenceCheckedToDetailsCheckedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.Reject, State.Validated , () => { if (GuardClauseFromLicenceCheckedToValidatedUsingTriggerReject != null) return GuardClauseFromLicenceCheckedToValidatedUsingTriggerReject(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromLicenceCheckedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromLicenceCheckedToRejectedUsingTriggerRejectOutright(); return true; } )
      ;
      stateMachine.Configure(State.DetailsChecked)
        .OnEntry(() => { if (OnDetailsCheckedEntry != null) OnDetailsCheckedEntry(); })
        .OnExit(() => { if (OnDetailsCheckedExit != null) OnDetailsCheckedExit(); })
        .PermitIf(Trigger.Accept, State.LabelPrinted , () => { if (GuardClauseFromDetailsCheckedToLabelPrintedUsingTriggerAccept != null) return GuardClauseFromDetailsCheckedToLabelPrintedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.Reject, State.LicenceChecked , () => { if (GuardClauseFromDetailsCheckedToLicenceCheckedUsingTriggerReject != null) return GuardClauseFromDetailsCheckedToLicenceCheckedUsingTriggerReject(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromDetailsCheckedToRejectedUsingTriggerRejectOutright(); return true; } )
      ;
      stateMachine.Configure(State.LabelPrinted)
        .OnEntry(() => { if (OnLabelPrintedEntry != null) OnLabelPrintedEntry(); })
        .OnExit(() => { if (OnLabelPrintedExit != null) OnLabelPrintedExit(); })
        .PermitIf(Trigger.Accept, State.ItemShipped , () => { if (GuardClauseFromLabelPrintedToItemShippedUsingTriggerAccept != null) return GuardClauseFromLabelPrintedToItemShippedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.Reject, State.DetailsChecked , () => { if (GuardClauseFromLabelPrintedToDetailsCheckedUsingTriggerReject != null) return GuardClauseFromLabelPrintedToDetailsCheckedUsingTriggerReject(); return true; } )
        .PermitIf(Trigger.RejectOutright, State.Rejected , () => { if (GuardClauseFromLabelPrintedToRejectedUsingTriggerRejectOutright != null) return GuardClauseFromLabelPrintedToRejectedUsingTriggerRejectOutright(); return true; } )
      ;
      stateMachine.Configure(State.ItemShipped)
        .OnEntry(() => { if (OnItemShippedEntry != null) OnItemShippedEntry(); })
        .OnExit(() => { if (OnItemShippedExit != null) OnItemShippedExit(); })
        .PermitIf(Trigger.Accept, State.ReceiptConfirmed , () => { if (GuardClauseFromItemShippedToReceiptConfirmedUsingTriggerAccept != null) return GuardClauseFromItemShippedToReceiptConfirmedUsingTriggerAccept(); return true; } )
        .PermitIf(Trigger.Lost, State.ReportedLost , () => { if (GuardClauseFromItemShippedToReportedLostUsingTriggerLost != null) return GuardClauseFromItemShippedToReportedLostUsingTriggerLost(); return true; } )
      ;
      stateMachine.Configure(State.ReportedLost)
        .OnEntry(() => { if (OnReportedLostEntry != null) OnReportedLostEntry(); })
        .OnExit(() => { if (OnReportedLostExit != null) OnReportedLostExit(); })
        .PermitIf(Trigger.Accept, State.Closed , () => { if (GuardClauseFromReportedLostToClosedUsingTriggerAccept != null) return GuardClauseFromReportedLostToClosedUsingTriggerAccept(); return true; } )
      ;
      stateMachine.Configure(State.ReceiptConfirmed)
        .OnEntry(() => { if (OnReceiptConfirmedEntry != null) OnReceiptConfirmedEntry(); })
        .OnExit(() => { if (OnReceiptConfirmedExit != null) OnReceiptConfirmedExit(); })
        .PermitIf(Trigger.Accept, State.Closed , () => { if (GuardClauseFromReceiptConfirmedToClosedUsingTriggerAccept != null) return GuardClauseFromReceiptConfirmedToClosedUsingTriggerAccept(); return true; } )
      ;
      stateMachine.Configure(State.Closed)
        .OnEntry(() => { if (OnClosedEntry != null) OnClosedEntry(); })
        .OnExit(() => { if (OnClosedExit != null) OnClosedExit(); })
      ;
      stateMachine.Configure(State.Rejected)
        .OnEntry(() => { if (OnRejectedEntry != null) OnRejectedEntry(); })
        .OnExit(() => { if (OnRejectedExit != null) OnRejectedExit(); })
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}